using <string.h>::{memset};
using <assert.h>::{assert};
using <stdio.h>::{stderr, printf};
using hex;
using err;
using <stdint.h>::{uintptr_t};

inline using "asan.h"::{
    ASAN_POISON_MEMORY_REGION,
    ASAN_UNPOISON_MEMORY_REGION
}



const usize ALIGN = (usize)sizeof(uintptr_t);

pub theory member(void * m, Pool*p) -> bool;

export struct Pool+ {
    u8      blocksize;
    usize   poolsize;

    u8 mut* used;
    u8 mut* pool;


    u8  mem[];
}

export fn new(Pool+pt mut *self, u8 mut blocksize)
    where pt > pt/(usize)blocksize
{
    assert((usize)blocksize % ALIGN == 0);

    self->blocksize = blocksize;
    usize mut usedmemlen = pt / (usize)blocksize / 8;
    unsafe { usedmemlen += (ALIGN - (usedmemlen % ALIGN)); }

    self->used  = self->mem;
    self->pool  = self->mem + usedmemlen;

    assert((usize)self->used % ALIGN == 0);
    assert((usize)self->pool % ALIGN == 0);

    self->poolsize = pt - usedmemlen;

    memset(self->used, 0, usedmemlen);

    ASAN_POISON_MEMORY_REGION(self->pool, self->poolsize);
}

export fn free_bytes(Pool *self) -> usize
{
    static_attest(safe(self->used));
    static_attest(len(self->used) == self->poolsize/(usize)self->blocksize);

    usize mut c = 0;
    for (usize mut i = 0 ; i < self->poolsize/(usize)self->blocksize; i++) {
        if !bitarray_test(self->used, i) {
            c += (usize)self->blocksize;
        }
    }
    return c;
}

export fn alloc(Pool mut *self, usize mut size) -> void mut*
    model member(return, self)
{
    static_attest(member(0, self));

    // 8 byte redzone
    size += 8;
    // 8 byte align
    size += (ALIGN - (size % ALIGN));

    usize mut blocks = size/(usize)self->blocksize;
    if size % (usize)self->blocksize != 0 {
        blocks += 1;
    }
    if blocks > 256 {
        return 0;
    }

    for (usize mut i = 0; i < self->poolsize/(usize)self->blocksize ; i++) {

        // optimization with faster byte compare
        static_attest(i/8 < len(self->used));
        if self->used[i/8] == 0xff {
            i+=7;
            continue;
        }


        static_attest(safe(self->used));
        static_attest(len(self->used) == self->poolsize/(usize)self->blocksize);

        usize mut i2 = i;
        bool mut allfree = true;
        for (usize mut j = 0; j < blocks; j++) {

            if i2 >= self->poolsize/(usize)self->blocksize {
                allfree = false;
                break;
            }
            if bitarray_test(self->used, i2) {
                allfree = false;
                break;
            }

            i2++;
        }

        if allfree {
            u8 mut * mut mem = 0;
            unsafe {
                mem = self->pool + ((usize)self->blocksize * i);
                ASAN_UNPOISON_MEMORY_REGION(mem, size);
                memset(mem, 0, size);
                mem[0] = 0x60;
                mem[1] = 0x61;
                mem[2] = 0x62;
                mem[3] = 0x63;
                mem[4] = blocks;
                mem[5] = 0x65;
                mem[6] = 0x66;
                mem[7] = 0x67;
                ASAN_POISON_MEMORY_REGION(mem, 8);
                mem = mem + 8;
            }

            for (usize mut j = 0; j < blocks; j++) {
                static_attest((i+j)/8 < len(self->used));
                bitarray_set(self->used, i+j);
            }

            assert((usize)mem % ALIGN == 0);
            return mem;
        }
    }
    return 0;
}

export fn free(Pool mut *self, void * unsafe mut ptr_)
    where member(ptr_, self)
{
    let mut ptr = (u8 mut*)ptr_;

    if ptr == 0 {
        return;
    }

    u8 mut blocks = 1;
    usize mut startblock = 0;
    unsafe {
        ptr = ptr - 8;
        ASAN_UNPOISON_MEMORY_REGION(ptr, 8);
        blocks = ptr[4];
    }
    static_attest(len(ptr) >= 8);

    if ptr[0] != 0x60 || ptr[1] != 0x61 || ptr[2] != 0x62 || ptr[3] != 0x63 || ptr[7] != 0x67 {
        unsafe { hex::fdump(stderr, ptr, 8); }
        err::panic("invalid address passed to free");
    }

    ASAN_POISON_MEMORY_REGION(ptr, blocks * self->blocksize);

    unsafe {
        assert((usize)blocks < self->poolsize/(usize)self->blocksize);
        startblock = ((u8*)ptr - self->pool) / (usize)self->blocksize;
        assert(startblock < self->poolsize/(usize)self->blocksize);
    }

    for (usize mut i = startblock; i < startblock + (usize)blocks ; i++) {
        static_attest(safe(self->used));
        static_attest(i/8 < len(self->used));
        bitarray_clear(self->used, i);
    }
}

fn bitarray_set(u8 mut* a, usize index)
    where len(a) > index/8
{
    a[index/8] |= (u8)(1<<(index % 8));
}

fn bitarray_clear(u8 mut* a, usize index)
    where len(a) > index/8
{
    a[index/8] &= (u8)~(1<<(index % 8));
}

fn bitarray_test(u8 mut* a, usize index) -> bool
    where len(a) > index/8
{
    return (a[index/8] & (u8)(1<<(index % 8))) > 0;
}
